{   
  config: {   
    minShortPressMS: 50, 
    minLongPressMS: 1000, 
    default_volume: 6, 
    default_speed: 5, 
    shortIdleMS: 5000, 
    longIdleMS: 20000, 
    powerCheckMS: 300000, 
    systemAudio: system/audio/, 
    initState: stWakeup
  },  
  CGroups: {  
    whenSleeping:  { Home: stWakeup,     
                     Circle: stWakeup },
    whenAwake:     { Home: stWakeup,     
                     Circle__: stWakeup,    
                     Home__: stSleepy,     
                     LongIdle: stSleepy },
    whenUSB:       { starPlus: stCloseUSB },
    whenPlaying:   { Plus: stPlayLouder,   
                     Minus: stPlaySofter,  
                     Plus__: stPlayFaster, 
                     Minus__: stPlaySlower,
                     Pot: stPlayPause,   
                     Lhand__: stPlayJumpBack, 
                     Rhand__: stPlayJumpFwd },
    whenNav:       { Lhand: stOnPrevSubj,  
                     Rhand: stOnNextSubj,  
                     Tree: stOnNextMsg,    
                     Table: stOnPrevMsg,   
                     AudioDone: stWait,  
                     ShortIdle: stWait },
    whenFeedback:  { Circle: stFbOptions,  
                     Star: stStartRec },
    whenRecording: { Pot: stPauseRec,    
                     Star: stFinishRec,    
                     Tree: stPlayRec,    
                     Table: stCancelRec },
    whenIdle:      { LowBattery: stLowBatt, 
                     DevUpdate: stGoFWU,  
                     starPlus: stUSBmode,  
                     Plus: stIdleLouder, 
                     Minus: stIdleSofter,  
                     Plus__: stIdleFaster,   
                     Minus__: stIdleSlower,  
                     starTable: stTest, 
                     starMinus: stOnUpdate },
  },  
  CStates: {  
    stWakeup:     { Actions: [ LED(_), bgLED(G_9), changePkg, playSys(welcome) ],      CGroups:[ whenAwake, whenPlaying, whenNav ], AudioDone: stPromptSubj },
    stPromptSubj: { Actions: [ playSys(rh_for_subj) ],                      CGroups:[ whenAwake, whenPlaying ], AudioDone: stWait },
    stWait:       {                                                         CGroups:[ whenAwake, whenNav, whenIdle ] },
    stSleepy:     { Actions: [ bgLED(O_9),  saveSt(1),  setTimer(10000) ],  CGroups:[ whenAwake ], allKeys: stUnSleepy, Timer: stGoSleep },
    stUnSleepy:   { Actions: [ bgLED(G_9),  goSavedSt(1) ],                 CGroups:[ whenAwake ] },
    stGoSleep:    { Actions: [ bgLED(R_3),  setTimer(2000) ],               CGroups:[ whenSleeping ], Timer: stFallAsleep },
    stFallAsleep: { Actions: [ powerDown ],                                 CGroups:[ whenSleeping ] },
    
    stPlayLouder: { Actions: [ volAdj( 1),  goPrevSt ],                     CGroups:[ whenAwake, whenPlaying ] },
    stPlaySofter: { Actions: [ volAdj(-1),  goPrevSt ],                     CGroups:[ whenAwake, whenPlaying ] },
    stPlayFaster: { Actions: [ spdAdj( 1),  goPrevSt ],                     CGroups:[ whenAwake, whenPlaying ] },
    stPlaySlower: { Actions: [ spdAdj(-1),  goPrevSt ],                     CGroups:[ whenAwake, whenPlaying ] },

    stPlayPause:  { Actions: [ saveSt( 2),  pausePlay ],                    CGroups:[ whenAwake, whenPlaying, whenNav ] },
    stPlayResume: { Actions: [ resumePlay,  goSavedSt(2) ],                 CGroups:[ whenAwake, whenPlaying, whenNav ] },
    stPlayJumpBack: { Actions: [ posAdj(-7) ],                              CGroups:[ whenAwake, whenPlaying, whenNav ] },
    stPlayJumpFwd:  { Actions: [ posAdj(60) ],                              CGroups:[ whenAwake, whenPlaying, whenNav ] },
    
    stOnPrevSubj: { Actions: [ subjAdj(-1),  playSubj(nm) ],                CGroups:[ whenAwake, whenPlaying, whenNav ], AudioDone: stInvitation },
    stOnNextSubj: { Actions: [ subjAdj( 1),  playSubj(nm) ],                CGroups:[ whenAwake, whenPlaying, whenNav ], AudioDone: stInvitation },
    stInvitation: { Actions: [ playSubj(pr) ],                              CGroups:[ whenAwake, whenPlaying, whenNav ], AudioDone: stPromptNextSubj },
    stPromptNextSubj: { Actions: [ playSys(rh_for_nxt_subj) ],              CGroups:[ whenAwake, whenPlaying, whenNav ] },
    stOnPrevMsg:  { Actions: [ msgAdj( -1),  playSubj(msg) ],               CGroups:[ whenAwake, whenPlaying, whenNav ] },
    stOnNextMsg:  { Actions: [ msgAdj(  1),  playSubj(msg) ],               CGroups:[ whenAwake, whenPlaying, whenNav ] },
    stOnFeedback: { Actions: [ playSys(cir_record_ideas) ],                 CGroups:[ whenAwake, whenFeedback ] },
    stOnOptions:  {                                                         CGroups:[ whenAwake ] },

    stStartRec:   { Actions: [ startRec ],                                  CGroups:[ whenAwake, whenRecording ] },
    stPauseRec:   { Actions: [ saveSt( 2),  pauseRec ],                     CGroups:[ whenAwake, whenRecording ] },
    stFinishRec:  { Actions: [ finishRec ],                                 CGroups:[ whenAwake, whenRecording ] },
    stPlayRec:    { Actions: [ playRec ],                                   CGroups:[ whenAwake, whenRecording ] },
    stSaveRec:    { Actions: [ saveRec(sv) ],                               CGroups:[ whenAwake, whenRecording ] },
    stCancelRec:  { Actions: [ saveRec(del) ],                              CGroups:[ whenAwake, whenRecording ] },
    
    stOnLowBatt:  { Actions: [ bgLED(R_9) ],                                CGroups:[ whenAwake ] },
    stOnUpdate:   { Actions: [ sysBoot ],                                   CGroups:[ whenAwake ] },
    stIdleLouder: { Actions: [ volAdj( 1),  playSys(louder),  goPrevSt ],   CGroups:[ whenAwake, whenPlaying ] },
    stIdleSofter: { Actions: [ volAdj(-1),  playSys(softer),  goPrevSt ],   CGroups:[ whenAwake, whenPlaying ] },
    stIdleFaster: { Actions: [ spdAdj( 1),  playSys(faster),  goPrevSt ],   CGroups:[ whenAwake, whenPlaying ] },
    stIdleSlower: { Actions: [ spdAdj(-1),  playSys(slower),  goPrevSt ],   CGroups:[ whenAwake, whenPlaying ] },
    stUSBmode:    { Actions: [ bgLED(O2_8), startUSB ],                     CGroups:[ whenUSB ] },
    stCloseUSB:   { Actions: [ endUSB, bgLED(G_9), setTimer(1000) ],        Timer: stWakeup },
    stOnCharging: { Actions: [ showCharge,  goPrevSt ],                     CGroups:[ whenAwake, whenIdle ] },
    stLowBatt:    {                                                         CGroups:[ whenAwake, whenIdle ] },
    stGoFWU:      {                                                         CGroups:[ whenAwake ] },
    stTest:       { Actions: [ sysTest ],                                   CGroups:[ whenAwake ] },
  } 
}
